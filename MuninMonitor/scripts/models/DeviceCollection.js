// Generated by CoffeeScript 1.3.3
(function() {
  var _this = this;

  this.DeviceCollection = Backbone.Collection.extend({
    url: localStorage["munin_monitor_url"],
    initialize: function(models, option) {
      var url;
      if ((option != null) && (option.badge != null)) {
        this.badge = option.badge;
      }
      this.on("reset", this.collectionReset, this);
      this.on("add", this.deviceAdded, this);
      this.on("remove", this.deviceAdded, this);
      this.on("error", this.handleError, this);
      localStorage['munin_monitor_url'] = localStorage['munin_monitor_url'] || 'http://munin.ping.uio.no/';
      url = localStorage['munin_monitor_url'];
      return localStorage['munin_monitor_interval'] = localStorage['munin_monitor_interval'] || (1 * 60000);
    },
    parse: function(response) {
      var resp, url;
      url = this.url;
      resp = [];
      $(response).find(".warn,.crit").each(function(index, element) {
        var class_attr, classname, domain, host, href, hrefSplit, message, service, serviceArr;
        href = $(element).attr("href");
        class_attr = $(element).attr("class");
        hrefSplit = href.split("/");
        domain = hrefSplit[hrefSplit.length - 3];
        host = hrefSplit[hrefSplit.length - 2];
        serviceArr = hrefSplit[hrefSplit.length - 1].split("#");
        service = serviceArr[1];
        if (service != null) {
          service = service.toLowerCase().replace(/\b[a-z]/g, function(letter) {
            return letter.toUpperCase();
          });
        }
        classname = class_attr === "warn" ? "warning" : "error";
        message = "" + service + " " + classname + " on " + host;
        return resp.push({
          id: url + href,
          "class": class_attr,
          host: host,
          domain: domain,
          service: service,
          message: message
        });
      });
      return resp;
    },
    deviceAdded: function(device) {
      if (this.badge != null) {
        this.badge.animateFlip();
      }
      localStorage["munin.monitor.devices"] = JSON.stringify(this.toJSON());
      return chrome.browserAction.setBadgeText({
        text: "" + (this.size())
      });
    },
    handleError: function() {
      chrome.browserAction.setBadgeText({
        text: "x"
      });
      return localStorage["munin.monitor.devices"] = "[]";
    },
    updateFetch: function() {
      return this.fetch({
        "dataType": "html",
        "cache": false,
        "update": true,
        "removeMissing": true
      });
    },
    poll: function(interval) {
      var _this = this;
      this.url = localStorage["munin_monitor_url"];
      this.updateFetch();
      return this.timeout = setTimeout(function() {
        return _this.poll(parseInt(localStorage["munin_monitor_interval"]));
      }, interval);
    },
    comparator: function(chapter) {
      return chapter.get("class");
    }
  });

}).call(this);
